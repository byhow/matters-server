/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql'
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
/**
 * The dummy queries and mutations are necessary because
 * graphql-js cannot have empty root types and we only extend
 * these types later on
 * Ref: apollographql/graphql-tools#293
 */
export interface GQLQuery {
  _?: boolean
  article?: GQLArticle
  articles: GQLArticleConnection
  node?: GQLNode
  frequentSearch?: Array<string>
  search: GQLSearchResultConnection
  official: GQLOfficial
  releases: GQLReleaseConnection
  viewer?: GQLUser
  user?: GQLUser
}

export interface GQLArticleInput {
  mediaHash: string
}

export interface GQLArticle extends GQLNode {
  id: string
  slug: string
  createdAt: GQLDateTime
  publishState: GQLPublishState
  public: boolean
  live: boolean
  author: GQLUser
  title: string
  cover?: GQLURL
  summary: string
  tags?: Array<GQLTag>
  wordCount?: number
  dataHash?: string
  mediaHash?: string
  content: string
  gatewayUrls?: Array<GQLURL>
  upstream?: GQLArticle
  downstreams: GQLArticleConnection
  relatedArticles: GQLArticleConnection

  /**
   * MAT recieved for this article
   */
  MAT: number
  participantCount: number
  subscribers: GQLUserConnection
  appreciators: GQLUserConnection
  appreciatorCount: number

  /**
   * Viewer has subscribed
   */
  subscribed: boolean

  /**
   * Viewer has appreciate
   */
  hasAppreciate: boolean
  commentCount: number
  pinnedComments?: Array<GQLComment>
  comments: GQLCommentConnection
}

export interface GQLNode {
  id: string
}

/** Use this to resolve interface type Node */
export type GQLPossibleNodeTypeNames =
  | 'Article'
  | 'User'
  | 'Tag'
  | 'Draft'
  | 'Invitation'
  | 'Comment'

export interface GQLNodeNameMap {
  Node: GQLNode
  Article: GQLArticle
  User: GQLUser
  Tag: GQLTag
  Draft: GQLDraft
  Invitation: GQLInvitation
  Comment: GQLComment
}

export type GQLDateTime = any

export enum GQLPublishState {
  archived = 'archived',
  pending = 'pending',
  error = 'error',
  published = 'published',
  banned = 'banned',
  recalled = 'recalled'
}

export interface GQLUser extends GQLNode {
  id: string
  uuid: GQLUUID
  info: GQLUserInfo
  settings: GQLUserSettings
  recommendation: GQLRecommendation

  /**
   * Articles written by this user
   */
  articles: GQLArticleConnection
  drafts: GQLDraftConnection
  audiodrafts: GQLAudiodraftConnection

  /**
   * Comments posted by this user
   */
  commentedArticles: GQLArticleConnection
  subscriptions: GQLArticleConnection
  activity: GQLUserActivity

  /**
   * Followers of this user
   */
  followers: GQLUserConnection

  /**
   * Users that this user follows
   */
  followees: GQLUserConnection

  /**
   * This user is following viewer
   */
  isFollower: boolean

  /**
   * Viewer is following this user
   */
  isFollowee: boolean
  status: GQLUserStatus
  notices: GQLNoticeConnection
}

export type GQLUUID = any

export interface GQLUserInfo {
  createdAt: GQLDateTime

  /**
   * Unique user name
   */
  userName: string

  /**
   * Display name on profile
   */
  displayName: string

  /**
   * User desciption
   */
  description?: string

  /**
   * URL for avatar
   */
  avatar?: GQLURL
  email?: GQLEmail
  mobile?: string

  /**
   * Use 500 for now, adaptive in the future
   */
  readSpeed: number
}

export type GQLURL = any

export type GQLEmail = any

export interface GQLUserSettings {
  /**
   * User language setting
   */
  language: GQLUserLanguage

  /**
   * Thrid party accounts binded for the user
   */
  oauthType: Array<GQLOAuthType>

  /**
   * Notification settings
   */
  notification: GQLNotificationSetting
}

export enum GQLUserLanguage {
  en = 'en',
  zh_hans = 'zh_hans',
  zh_hant = 'zh_hant'
}

export enum GQLOAuthType {
  facebook = 'facebook',
  wechat = 'wechat',
  google = 'google'
}

export interface GQLNotificationSetting {
  enable: boolean
  mention: boolean
  follow: boolean
  comment: boolean
  appreciation: boolean
  articleSubscription: boolean
  commentSubscribed: boolean
  downstream: boolean
  commentPinned: boolean
  commentVoted: boolean

  /**
   * walletUpdate: Boolean!
   */
  officialNotice: boolean
  reportFeedback: boolean
}

export interface GQLRecommendation {
  followeeArticles: GQLArticleConnection
  newest: GQLArticleConnection
  hottest: GQLArticleConnection

  /**
   * In case you missed it
   */
  icymi: GQLArticleConnection
  tags: GQLTagConnection
  topics: GQLArticleConnection
  authors: GQLUserConnection
}

export interface GQLConnectionArgs {
  after?: string
  first?: number
}

export interface GQLArticleConnection {
  pageInfo: GQLPageInfo
  edges?: Array<GQLArticleEdge>
}

export interface GQLPageInfo {
  startCursor?: string
  endCursor?: string
  hasNextPage: boolean
}

export interface GQLArticleEdge {
  cursor: string
  node: GQLArticle
}

export interface GQLTagConnection {
  pageInfo: GQLPageInfo
  edges: Array<GQLTagEdge | null>
}

export interface GQLTagEdge {
  cursor: string
  node: GQLTag
}

export interface GQLTag extends GQLNode {
  id: string
  content: string
  count: number
  articles: GQLArticleConnection
}

export interface GQLUserConnection {
  pageInfo: GQLPageInfo
  edges?: Array<GQLUserEdge | null>
}

export interface GQLUserEdge {
  cursor: string
  node: GQLUser
}

export interface GQLDraftConnection {
  pageInfo: GQLPageInfo
  edges: Array<GQLDraftEdge | null>
}

export interface GQLDraftEdge {
  cursor: string
  node: GQLDraft
}

export interface GQLDraft extends GQLNode {
  id: string
  upstream?: GQLArticle
  title?: string
  summary?: string
  content: string
  createdAt: GQLDateTime
  updatedAt: GQLDateTime
  tags?: Array<string | null>
  cover?: GQLURL
  publishState: GQLPublishState
}

export interface GQLAudiodraftConnection {
  pageInfo: GQLPageInfo
  edges: Array<GQLAudiodraftEdge | null>
}

export interface GQLAudiodraftEdge {
  cursor: string
  node: GQLAudiodraft
}

export interface GQLAudiodraft {
  id: string
  authorId: string
  title?: string
  audio: GQLURL
  length: number
  createdAt: GQLDateTime
  updatedAt: GQLDateTime
}

export interface GQLUserActivity {
  history: GQLReadHistoryConnection
  recentSearches: GQLRecentSearchConnection
}

export interface GQLReadHistoryConnection {
  pageInfo: GQLPageInfo
  edges: Array<GQLReadHistoryEdge | null>
}

export interface GQLReadHistoryEdge {
  cursor: string
  node: GQLReadHistory
}

export interface GQLReadHistory {
  id: string
  article: GQLArticle
  readAt: GQLDateTime
}

export interface GQLRecentSearchConnection {
  pageInfo: GQLPageInfo
  edges: Array<GQLRecentSearchEdge | null>
}

export interface GQLRecentSearchEdge {
  cursor: string
  node: string
}

export interface GQLUserStatus {
  state: GQLUserState

  /**
   * Total MAT left in wallet
   */
  MAT: GQLMAT
  invitation: GQLInvitationStatus

  /**
   * Number of articles published by user
   */
  articleCount: number

  /**
   * Number of views on articles
   */
  viewCount: number
  draftCount: number

  /**
   * Number of comments posted by user
   */
  commentCount: number
  quotationCount: number
  subscriptionCount: number

  /**
   * Number of user that this user follows
   */
  followeeCount: number

  /**
   * Number of user that follows this user
   */
  followerCount: number

  /**
   * Number of unread notices
   */
  unreadNoticeCount: number
}

export enum GQLUserState {
  inactive = 'inactive',
  onboarding = 'onboarding',
  active = 'active',
  banned = 'banned',
  frozen = 'frozen',
  archived = 'archived'
}

export interface GQLMAT {
  total: number
  history: GQLTransactionConnection
}

export interface GQLTransactionConnection {
  pageInfo: GQLPageInfo
  edges: Array<GQLTransactionEdge | null>
}

export interface GQLTransactionEdge {
  cursor: string
  node: GQLTransaction
}

export interface GQLTransaction {
  delta: number
  purpose: GQLTransactionPurpose
  reference?: GQLNode
  createdAt: GQLDateTime
}

export enum GQLTransactionPurpose {
  appreciate = 'appreciate',
  invitationAccepted = 'invitationAccepted',
  joinByInvitation = 'joinByInvitation',
  joinByTask = 'joinByTask'
}

export interface GQLInvitationStatus {
  MAT: number

  /**
   * invitation number left
   */
  left: number

  /**
   * invitations sent
   */
  sent: GQLInvitationConnection
}

export interface GQLInvitationConnection {
  pageInfo: GQLPageInfo
  edges: Array<GQLInvitationEdge | null>
}

export interface GQLInvitationEdge {
  cursor: string
  node: GQLInvitation
}

export interface GQLInvitation extends GQLNode {
  id: string
  user?: GQLUser
  email?: string
  accepted: boolean
  createdAt: GQLDateTime
}

export interface GQLNoticeConnection {
  pageInfo: GQLPageInfo
  edges?: Array<GQLNoticeEdge>
}

export interface GQLNoticeEdge {
  cursor: string
  node: GQLNotice
}

export interface GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
}

/** Use this to resolve interface type Notice */
export type GQLPossibleNoticeTypeNames =
  | 'ArticleNewAppreciationNotice'
  | 'ArticleNewCommentNotice'
  | 'ArticleNewDownstreamNotice'
  | 'ArticleNewSubscriberNotice'
  | 'ArticlePublishedNotice'
  | 'CommentMentionedYouNotice'
  | 'CommentNewReplyNotice'
  | 'CommentNewUpvoteNotice'
  | 'CommentPinnedNotice'
  | 'DownstreamArticleArchivedNotice'
  | 'OfficialAnnouncementNotice'
  | 'SubscribedArticleNewCommentNotice'
  | 'UpstreamArticleArchivedNotice'
  | 'UserNewFollowerNotice'

export interface GQLNoticeNameMap {
  Notice: GQLNotice
  ArticleNewAppreciationNotice: GQLArticleNewAppreciationNotice
  ArticleNewCommentNotice: GQLArticleNewCommentNotice
  ArticleNewDownstreamNotice: GQLArticleNewDownstreamNotice
  ArticleNewSubscriberNotice: GQLArticleNewSubscriberNotice
  ArticlePublishedNotice: GQLArticlePublishedNotice
  CommentMentionedYouNotice: GQLCommentMentionedYouNotice
  CommentNewReplyNotice: GQLCommentNewReplyNotice
  CommentNewUpvoteNotice: GQLCommentNewUpvoteNotice
  CommentPinnedNotice: GQLCommentPinnedNotice
  DownstreamArticleArchivedNotice: GQLDownstreamArticleArchivedNotice
  OfficialAnnouncementNotice: GQLOfficialAnnouncementNotice
  SubscribedArticleNewCommentNotice: GQLSubscribedArticleNewCommentNotice
  UpstreamArticleArchivedNotice: GQLUpstreamArticleArchivedNotice
  UserNewFollowerNotice: GQLUserNewFollowerNotice
}

export interface GQLComment extends GQLNode {
  id: string
  state: GQLCommentState
  createdAt: GQLDateTime

  /**
   * Original article of this comment
   */
  article: GQLArticle
  content?: string
  author: GQLUser
  pinned: boolean
  upvotes: number
  downvotes: number
  quote: boolean
  myVote?: GQLVote
  mentions?: Array<GQLUser>
  comments: GQLCommentConnection
  parentComment?: GQLComment
}

export enum GQLCommentState {
  active = 'active',
  archived = 'archived',
  banned = 'banned'
}

export enum GQLVote {
  up = 'up',
  down = 'down'
}

export interface GQLCommentConnection {
  pageInfo: GQLPageInfo
  edges?: Array<GQLCommentEdge>
}

export interface GQLCommentEdge {
  cursor: string
  node: GQLComment
}

export interface GQLCommentsInput {
  author?: string
  quote?: boolean
  sort?: GQLCommentSort
  after?: string
  first?: number
}

export enum GQLCommentSort {
  oldest = 'oldest',
  newest = 'newest',
  upvotes = 'upvotes'
}

export interface GQLArticlesInput {
  public?: boolean
  after?: string
  first?: number
}

export interface GQLNodeInput {
  id: string
}

export interface GQLSearchInput {
  key: string
  type: GQLSearchTypes
  after?: string
  first?: number
}

export enum GQLSearchTypes {
  Article = 'Article',
  User = 'User',
  Tag = 'Tag'
}

export interface GQLSearchResultConnection {
  pageInfo: GQLPageInfo
  edges?: Array<GQLSearchResultEdge>
}

export interface GQLSearchResultEdge {
  cursor: string
  node: GQLSearchResult
}

export interface GQLSearchResult {
  node?: GQLNode
  match?: string
}

export interface GQLOfficial {
  reportCategory: Array<string>
  feedbackCategory: Array<string>
}

export interface GQLReleasesInput {
  platform: GQLPlatformType
  channel: GQLChannelType
  after?: string
  first?: number
}

export enum GQLPlatformType {
  ios = 'ios',
  android = 'android'
}

export enum GQLChannelType {
  appStore = 'appStore',
  googlePlay = 'googlePlay'
}

export interface GQLReleaseConnection {
  pageInfo: GQLPageInfo
  edges?: Array<GQLReleaseEdge>
}

export interface GQLReleaseEdge {
  cursor: string
  node: GQLRelease
}

export interface GQLRelease {
  title?: string
  description?: string
  cover?: GQLURL
  link?: GQLURL
  platform: GQLPlatformType
  channel: GQLChannelType
  version: string
  latest: boolean
  forceUpdate: boolean
  releasedAt: GQLDateTime
}

export interface GQLUserInput {
  userName: string
}

export interface GQLMutation {
  _?: boolean
  publishArticle: GQLDraft
  archiveArticle: GQLArticle
  subscribeArticle?: boolean
  unsubscribeArticle?: boolean
  reportArticle?: boolean
  appreciateArticle: GQLArticle
  readArticle?: boolean
  recallPublish: GQLDraft
  toggleArticleLive: GQLArticle
  toggleArticlePublic: GQLArticle
  putComment: GQLComment
  pinComment: GQLComment
  deleteComment?: boolean
  reportComment?: boolean
  voteComment: GQLComment
  unvoteComment: GQLComment

  /**
   * audio dtaft
   */
  putAudiodraft: GQLAudiodraft
  deleteAudiodraft?: boolean

  /**
   * draft
   */
  putDraft: GQLDraft
  deleteDraft?: boolean
  markAllNoticesAsRead?: boolean
  singleFileUpload: GQLAsset
  feedback?: boolean

  /**
   * send/confirm verification code
   */
  sendVerificationCode?: boolean
  confirmVerificationCode: string

  /**
   * change or reset password
   */
  confirmResetPassword?: boolean

  /**
   * change email
   */
  confirmChangeEmail?: boolean

  /**
   * verify email
   */
  confirmVerifyEmail?: boolean

  /**
   * register
   */
  userRegister: GQLAuthResult

  /**
   * login
   */
  userLogin: GQLAuthResult
  addOAuth?: boolean

  /**
   * update info/ setting
   */
  updateUserInfo: GQLUser
  updateNotificationSetting?: GQLNotificationSetting

  /**
   * follow/unfollow
   */
  followUser?: boolean
  unfollowUser?: boolean

  /**
   * misc
   */
  importArticles?: Array<GQLArticle | null>
  clearReadHistory?: boolean
  clearSearchHistory?: boolean
  invite?: boolean
}

export interface GQLPublishArticleInput {
  id: string
  delay?: number
}

export interface GQLArchiveArticleInput {
  id: string
}

export interface GQLSubscribeArticleInput {
  id: string
}

export interface GQLUnsubscribeArticleInput {
  id: string
}

export interface GQLReportArticleInput {
  id: string
  category: string
  description?: string
  assetIds?: Array<string>
}

export interface GQLAppreciateArticleInput {
  id: string
  amount?: number
}

export interface GQLReadArticleInput {
  id: string
}

export interface GQLRecallPublishInput {
  id: string
}

export interface GQLToggleArticleLiveInput {
  id: string
  enabled: boolean
}

export interface GQLToggleArticlePublicInput {
  id: string
  enabled: boolean
}

export interface GQLPutCommentInput {
  comment: GQLCommentInput
  id?: string
}

export interface GQLCommentInput {
  content: string
  quotation?: string
  articleId: string
  parentId?: string
  mentions?: Array<string>
}

export interface GQLPinCommentInput {
  id: string
}

export interface GQLDeleteCommentInput {
  id: string
}

export interface GQLReportCommentInput {
  id: string
  category: string
  description?: string
  assetIds?: Array<string>
}

export interface GQLVoteCommentInput {
  vote: GQLVote
  id: string
}

export interface GQLUnvoteCommentInput {
  id: string
}

export interface GQLPutAudiodraftInput {
  id?: string
  audioAssetId?: string
  title?: string
  length?: number
}

export interface GQLDeleteAudiodraftInput {
  id: string
}

export interface GQLPutDraftInput {
  id?: string
  upstreamId?: string
  title?: string
  content: string
  tags?: Array<string | null>
  coverAssetId?: string
}

export interface GQLDeleteDraftInput {
  id: string
}

export interface GQLSingleFileUploadInput {
  type: GQLAssetType
  file: GQLUpload
}

export enum GQLAssetType {
  avatar = 'avatar',
  cover = 'cover',
  audiodraft = 'audiodraft',
  report = 'report',
  feedback = 'feedback'
}

export type GQLUpload = any

export interface GQLAsset {
  id: string
  type: GQLAssetType
  path: string
  createdAt: GQLDateTime
}

export interface GQLFeedbackInput {
  category: string
  description?: string
  assetIds?: Array<string>
  contact?: string
}

export interface GQLSendVerificationCodeInput {
  email: GQLEmail
  type: GQLVerificationCodeType
}

export enum GQLVerificationCodeType {
  register = 'register',
  email_reset = 'email_reset',
  password_reset = 'password_reset',
  email_verify = 'email_verify'
}

export interface GQLConfirmVerificationCodeInput {
  code: string
}

export interface GQLConfirmResetPasswordInput {
  password: string
  codeId: string
}

export interface GQLConfirmChangeEmailInput {
  oldEmail: GQLEmail
  oldEmailCodeId: string
  newEmail: GQLEmail
  newEmailCodeId: string
}

export interface GQLConfirmVerifyEmailInput {
  email: GQLEmail
  codeId: string
}

export interface GQLUserRegisterInput {
  email: GQLEmail
  displayName: string
  password: string
  codeId: string
}

export interface GQLAuthResult {
  auth: boolean
  token?: string
}

export interface GQLUserLoginInput {
  email: GQLEmail
  password: string
}

export interface GQLAddOAuthInput {
  name: string
  id: string
  type?: GQLOAuthType
}

export interface GQLUpdateUserInfoInput {
  displayName?: string
  avatar?: string
  description?: string
  language?: GQLUserLanguage
}

export interface GQLUpdateNotificationSettingInput {
  type: GQLNotificationSettingType
  enabled: boolean
}

export enum GQLNotificationSettingType {
  enable = 'enable',
  mention = 'mention',
  follow = 'follow',
  comment = 'comment',
  appreciation = 'appreciation',
  articleSubscription = 'articleSubscription',
  commentSubscribed = 'commentSubscribed',
  downstream = 'downstream',
  commentPinned = 'commentPinned',
  commentVoted = 'commentVoted',
  officialNotice = 'officialNotice',
  reportFeedback = 'reportFeedback'
}

export interface GQLFollowUserInput {
  id: string
}

export interface GQLUnfollowUserInput {
  id: string
}

export interface GQLImportArticlesInput {
  platform?: string
  token?: string
}

export interface GQLClearReadHistoryInput {
  id: string
}

export interface GQLInviteInput {
  id?: string
  email?: GQLEmail
}

export interface GQLSubscription {
  _?: boolean
  nodeEdited: GQLNode
}

export interface GQLNodeEditedInput {
  id: string
}

export interface GQLArticleNewAppreciationNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actors?: Array<GQLUser>
  target?: GQLArticle
  MAT?: number
}

export interface GQLArticleNewCommentNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actors?: Array<GQLUser>
  target?: GQLArticle
  comment?: GQLComment
}

export interface GQLArticleNewDownstreamNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actors?: Array<GQLUser>
  downstream?: GQLArticle
  target?: GQLArticle
}

export interface GQLArticleNewSubscriberNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actors?: Array<GQLUser>
  target?: GQLArticle
}

export interface GQLArticlePublishedNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  target?: GQLArticle
}

export interface GQLCommentMentionedYouNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actors?: Array<GQLUser>
  target?: GQLComment
}

export interface GQLCommentNewReplyNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actors?: Array<GQLUser>
  target?: GQLComment
  reply?: GQLComment
}

export interface GQLCommentNewUpvoteNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actors?: Array<GQLUser>
  target?: GQLComment
}

export interface GQLCommentPinnedNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  target?: GQLComment
}

export type GQLDate = any

export interface GQLDownstreamArticleArchivedNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  downstream?: GQLArticle
  target?: GQLArticle
}

export type GQLJSON = any

export interface GQLOfficialAnnouncementNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  message: string
  link?: GQLURL
}

export interface GQLSubscribedArticleNewCommentNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actors?: Array<GQLUser>
  target?: GQLArticle
  comment?: GQLComment
}

export type GQLTime = any

export interface GQLUpstreamArticleArchivedNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  upstream?: GQLArticle
  target?: GQLArticle
}

export enum GQLUserInfoFields {
  displayName = 'displayName',
  avatar = 'avatar',
  description = 'description',
  email = 'email',
  mobile = 'mobile'
}

export interface GQLUserNewFollowerNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actors?: Array<GQLUser>
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver
  Article?: GQLArticleTypeResolver
  Node?: {
    __resolveType: GQLNodeTypeResolver
  }

  DateTime?: GraphQLScalarType
  User?: GQLUserTypeResolver
  UUID?: GraphQLScalarType
  UserInfo?: GQLUserInfoTypeResolver
  URL?: GraphQLScalarType
  Email?: GraphQLScalarType
  UserSettings?: GQLUserSettingsTypeResolver
  NotificationSetting?: GQLNotificationSettingTypeResolver
  Recommendation?: GQLRecommendationTypeResolver
  ArticleConnection?: GQLArticleConnectionTypeResolver
  PageInfo?: GQLPageInfoTypeResolver
  ArticleEdge?: GQLArticleEdgeTypeResolver
  TagConnection?: GQLTagConnectionTypeResolver
  TagEdge?: GQLTagEdgeTypeResolver
  Tag?: GQLTagTypeResolver
  UserConnection?: GQLUserConnectionTypeResolver
  UserEdge?: GQLUserEdgeTypeResolver
  DraftConnection?: GQLDraftConnectionTypeResolver
  DraftEdge?: GQLDraftEdgeTypeResolver
  Draft?: GQLDraftTypeResolver
  AudiodraftConnection?: GQLAudiodraftConnectionTypeResolver
  AudiodraftEdge?: GQLAudiodraftEdgeTypeResolver
  Audiodraft?: GQLAudiodraftTypeResolver
  UserActivity?: GQLUserActivityTypeResolver
  ReadHistoryConnection?: GQLReadHistoryConnectionTypeResolver
  ReadHistoryEdge?: GQLReadHistoryEdgeTypeResolver
  ReadHistory?: GQLReadHistoryTypeResolver
  RecentSearchConnection?: GQLRecentSearchConnectionTypeResolver
  RecentSearchEdge?: GQLRecentSearchEdgeTypeResolver
  UserStatus?: GQLUserStatusTypeResolver
  MAT?: GQLMATTypeResolver
  TransactionConnection?: GQLTransactionConnectionTypeResolver
  TransactionEdge?: GQLTransactionEdgeTypeResolver
  Transaction?: GQLTransactionTypeResolver
  InvitationStatus?: GQLInvitationStatusTypeResolver
  InvitationConnection?: GQLInvitationConnectionTypeResolver
  InvitationEdge?: GQLInvitationEdgeTypeResolver
  Invitation?: GQLInvitationTypeResolver
  NoticeConnection?: GQLNoticeConnectionTypeResolver
  NoticeEdge?: GQLNoticeEdgeTypeResolver
  Notice?: {
    __resolveType: GQLNoticeTypeResolver
  }

  Comment?: GQLCommentTypeResolver
  CommentConnection?: GQLCommentConnectionTypeResolver
  CommentEdge?: GQLCommentEdgeTypeResolver
  SearchResultConnection?: GQLSearchResultConnectionTypeResolver
  SearchResultEdge?: GQLSearchResultEdgeTypeResolver
  SearchResult?: GQLSearchResultTypeResolver
  Official?: GQLOfficialTypeResolver
  ReleaseConnection?: GQLReleaseConnectionTypeResolver
  ReleaseEdge?: GQLReleaseEdgeTypeResolver
  Release?: GQLReleaseTypeResolver
  Mutation?: GQLMutationTypeResolver
  Upload?: GraphQLScalarType
  Asset?: GQLAssetTypeResolver
  AuthResult?: GQLAuthResultTypeResolver
  Subscription?: GQLSubscriptionTypeResolver
  ArticleNewAppreciationNotice?: GQLArticleNewAppreciationNoticeTypeResolver
  ArticleNewCommentNotice?: GQLArticleNewCommentNoticeTypeResolver
  ArticleNewDownstreamNotice?: GQLArticleNewDownstreamNoticeTypeResolver
  ArticleNewSubscriberNotice?: GQLArticleNewSubscriberNoticeTypeResolver
  ArticlePublishedNotice?: GQLArticlePublishedNoticeTypeResolver
  CommentMentionedYouNotice?: GQLCommentMentionedYouNoticeTypeResolver
  CommentNewReplyNotice?: GQLCommentNewReplyNoticeTypeResolver
  CommentNewUpvoteNotice?: GQLCommentNewUpvoteNoticeTypeResolver
  CommentPinnedNotice?: GQLCommentPinnedNoticeTypeResolver
  Date?: GraphQLScalarType
  DownstreamArticleArchivedNotice?: GQLDownstreamArticleArchivedNoticeTypeResolver
  JSON?: GraphQLScalarType
  OfficialAnnouncementNotice?: GQLOfficialAnnouncementNoticeTypeResolver
  SubscribedArticleNewCommentNotice?: GQLSubscribedArticleNewCommentNoticeTypeResolver
  Time?: GraphQLScalarType
  UpstreamArticleArchivedNotice?: GQLUpstreamArticleArchivedNoticeTypeResolver
  UserNewFollowerNotice?: GQLUserNewFollowerNoticeTypeResolver
}
export interface GQLQueryTypeResolver<TParent = any> {
  _?: QueryTo_Resolver<TParent>
  article?: QueryToArticleResolver<TParent>
  articles?: QueryToArticlesResolver<TParent>
  node?: QueryToNodeResolver<TParent>
  frequentSearch?: QueryToFrequentSearchResolver<TParent>
  search?: QueryToSearchResolver<TParent>
  official?: QueryToOfficialResolver<TParent>
  releases?: QueryToReleasesResolver<TParent>
  viewer?: QueryToViewerResolver<TParent>
  user?: QueryToUserResolver<TParent>
}

export interface QueryTo_Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface QueryToArticleArgs {
  input: GQLArticleInput
}
export interface QueryToArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToArticlesArgs {
  input: GQLArticlesInput
}
export interface QueryToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToArticlesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToNodeArgs {
  input: GQLNodeInput
}
export interface QueryToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToNodeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFrequentSearchArgs {
  key?: string
}
export interface QueryToFrequentSearchResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToFrequentSearchArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchArgs {
  input: GQLSearchInput
}
export interface QueryToSearchResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToSearchArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToOfficialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface QueryToReleasesArgs {
  input: GQLReleasesInput
}
export interface QueryToReleasesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToReleasesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface QueryToUserArgs {
  input: GQLUserInput
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleTypeResolver<TParent = any> {
  id?: ArticleToIdResolver<TParent>
  slug?: ArticleToSlugResolver<TParent>
  createdAt?: ArticleToCreatedAtResolver<TParent>
  publishState?: ArticleToPublishStateResolver<TParent>
  public?: ArticleToPublicResolver<TParent>
  live?: ArticleToLiveResolver<TParent>
  author?: ArticleToAuthorResolver<TParent>
  title?: ArticleToTitleResolver<TParent>
  cover?: ArticleToCoverResolver<TParent>
  summary?: ArticleToSummaryResolver<TParent>
  tags?: ArticleToTagsResolver<TParent>
  wordCount?: ArticleToWordCountResolver<TParent>
  dataHash?: ArticleToDataHashResolver<TParent>
  mediaHash?: ArticleToMediaHashResolver<TParent>
  content?: ArticleToContentResolver<TParent>
  gatewayUrls?: ArticleToGatewayUrlsResolver<TParent>
  upstream?: ArticleToUpstreamResolver<TParent>
  downstreams?: ArticleToDownstreamsResolver<TParent>
  relatedArticles?: ArticleToRelatedArticlesResolver<TParent>
  MAT?: ArticleToMATResolver<TParent>
  participantCount?: ArticleToParticipantCountResolver<TParent>
  subscribers?: ArticleToSubscribersResolver<TParent>
  appreciators?: ArticleToAppreciatorsResolver<TParent>
  appreciatorCount?: ArticleToAppreciatorCountResolver<TParent>
  subscribed?: ArticleToSubscribedResolver<TParent>
  hasAppreciate?: ArticleToHasAppreciateResolver<TParent>
  commentCount?: ArticleToCommentCountResolver<TParent>
  pinnedComments?: ArticleToPinnedCommentsResolver<TParent>
  comments?: ArticleToCommentsResolver<TParent>
}

export interface ArticleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToPublishStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToLiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToCoverResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToSummaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToWordCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToDataHashResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToMediaHashResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToGatewayUrlsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToUpstreamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToDownstreamsArgs {
  input: GQLConnectionArgs
}
export interface ArticleToDownstreamsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToDownstreamsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToRelatedArticlesArgs {
  input: GQLConnectionArgs
}
export interface ArticleToRelatedArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleToRelatedArticlesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToMATResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToParticipantCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToSubscribersArgs {
  input: GQLConnectionArgs
}
export interface ArticleToSubscribersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToSubscribersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAppreciatorsArgs {
  input: GQLConnectionArgs
}
export interface ArticleToAppreciatorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToAppreciatorsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAppreciatorCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToSubscribedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToHasAppreciateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToCommentCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToPinnedCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleToCommentsArgs {
  input: GQLCommentsInput
}
export interface ArticleToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToCommentsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo):
    | 'Article'
    | 'User'
    | 'Tag'
    | 'Draft'
    | 'Invitation'
    | 'Comment'
}
export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>
  uuid?: UserToUuidResolver<TParent>
  info?: UserToInfoResolver<TParent>
  settings?: UserToSettingsResolver<TParent>
  recommendation?: UserToRecommendationResolver<TParent>
  articles?: UserToArticlesResolver<TParent>
  drafts?: UserToDraftsResolver<TParent>
  audiodrafts?: UserToAudiodraftsResolver<TParent>
  commentedArticles?: UserToCommentedArticlesResolver<TParent>
  subscriptions?: UserToSubscriptionsResolver<TParent>
  activity?: UserToActivityResolver<TParent>
  followers?: UserToFollowersResolver<TParent>
  followees?: UserToFolloweesResolver<TParent>
  isFollower?: UserToIsFollowerResolver<TParent>
  isFollowee?: UserToIsFolloweeResolver<TParent>
  status?: UserToStatusResolver<TParent>
  notices?: UserToNoticesResolver<TParent>
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToUuidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToSettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToRecommendationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToArticlesArgs {
  input: GQLConnectionArgs
}
export interface UserToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToArticlesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToDraftsArgs {
  input: GQLConnectionArgs
}
export interface UserToDraftsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToDraftsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToAudiodraftsArgs {
  input: GQLConnectionArgs
}
export interface UserToAudiodraftsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToAudiodraftsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToCommentedArticlesArgs {
  input: GQLConnectionArgs
}
export interface UserToCommentedArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToCommentedArticlesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToSubscriptionsArgs {
  input: GQLConnectionArgs
}
export interface UserToSubscriptionsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToSubscriptionsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToActivityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToFollowersArgs {
  input: GQLConnectionArgs
}
export interface UserToFollowersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToFollowersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToFolloweesArgs {
  input: GQLConnectionArgs
}
export interface UserToFolloweesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToFolloweesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIsFollowerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToIsFolloweeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToNoticesArgs {
  input: GQLConnectionArgs
}
export interface UserToNoticesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToNoticesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserInfoTypeResolver<TParent = any> {
  createdAt?: UserInfoToCreatedAtResolver<TParent>
  userName?: UserInfoToUserNameResolver<TParent>
  displayName?: UserInfoToDisplayNameResolver<TParent>
  description?: UserInfoToDescriptionResolver<TParent>
  avatar?: UserInfoToAvatarResolver<TParent>
  email?: UserInfoToEmailResolver<TParent>
  mobile?: UserInfoToMobileResolver<TParent>
  readSpeed?: UserInfoToReadSpeedResolver<TParent>
}

export interface UserInfoToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserInfoToUserNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserInfoToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserInfoToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserInfoToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserInfoToMobileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserInfoToReadSpeedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLUserSettingsTypeResolver<TParent = any> {
  language?: UserSettingsToLanguageResolver<TParent>
  oauthType?: UserSettingsToOauthTypeResolver<TParent>
  notification?: UserSettingsToNotificationResolver<TParent>
}

export interface UserSettingsToLanguageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserSettingsToOauthTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserSettingsToNotificationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLNotificationSettingTypeResolver<TParent = any> {
  enable?: NotificationSettingToEnableResolver<TParent>
  mention?: NotificationSettingToMentionResolver<TParent>
  follow?: NotificationSettingToFollowResolver<TParent>
  comment?: NotificationSettingToCommentResolver<TParent>
  appreciation?: NotificationSettingToAppreciationResolver<TParent>
  articleSubscription?: NotificationSettingToArticleSubscriptionResolver<
    TParent
  >
  commentSubscribed?: NotificationSettingToCommentSubscribedResolver<TParent>
  downstream?: NotificationSettingToDownstreamResolver<TParent>
  commentPinned?: NotificationSettingToCommentPinnedResolver<TParent>
  commentVoted?: NotificationSettingToCommentVotedResolver<TParent>
  officialNotice?: NotificationSettingToOfficialNoticeResolver<TParent>
  reportFeedback?: NotificationSettingToReportFeedbackResolver<TParent>
}

export interface NotificationSettingToEnableResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToMentionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToFollowResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToCommentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToAppreciationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToArticleSubscriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToCommentSubscribedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToDownstreamResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToCommentPinnedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToCommentVotedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToOfficialNoticeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationSettingToReportFeedbackResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRecommendationTypeResolver<TParent = any> {
  followeeArticles?: RecommendationToFolloweeArticlesResolver<TParent>
  newest?: RecommendationToNewestResolver<TParent>
  hottest?: RecommendationToHottestResolver<TParent>
  icymi?: RecommendationToIcymiResolver<TParent>
  tags?: RecommendationToTagsResolver<TParent>
  topics?: RecommendationToTopicsResolver<TParent>
  authors?: RecommendationToAuthorsResolver<TParent>
}

export interface RecommendationToFolloweeArticlesArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToFolloweeArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: RecommendationToFolloweeArticlesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToNewestArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToNewestResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToNewestArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToHottestArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToHottestResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToHottestArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToIcymiArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToIcymiResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToIcymiArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToTagsArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToTagsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToTopicsArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToTopicsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToTopicsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToAuthorsArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToAuthorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToAuthorsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleConnectionTypeResolver<TParent = any> {
  pageInfo?: ArticleConnectionToPageInfoResolver<TParent>
  edges?: ArticleConnectionToEdgesResolver<TParent>
}

export interface ArticleConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLPageInfoTypeResolver<TParent = any> {
  startCursor?: PageInfoToStartCursorResolver<TParent>
  endCursor?: PageInfoToEndCursorResolver<TParent>
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>
}

export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLArticleEdgeTypeResolver<TParent = any> {
  cursor?: ArticleEdgeToCursorResolver<TParent>
  node?: ArticleEdgeToNodeResolver<TParent>
}

export interface ArticleEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTagConnectionTypeResolver<TParent = any> {
  pageInfo?: TagConnectionToPageInfoResolver<TParent>
  edges?: TagConnectionToEdgesResolver<TParent>
}

export interface TagConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TagConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTagEdgeTypeResolver<TParent = any> {
  cursor?: TagEdgeToCursorResolver<TParent>
  node?: TagEdgeToNodeResolver<TParent>
}

export interface TagEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TagEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTagTypeResolver<TParent = any> {
  id?: TagToIdResolver<TParent>
  content?: TagToContentResolver<TParent>
  count?: TagToCountResolver<TParent>
  articles?: TagToArticlesResolver<TParent>
}

export interface TagToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TagToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TagToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TagToArticlesArgs {
  input: GQLConnectionArgs
}
export interface TagToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: TagToArticlesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserConnectionTypeResolver<TParent = any> {
  pageInfo?: UserConnectionToPageInfoResolver<TParent>
  edges?: UserConnectionToEdgesResolver<TParent>
}

export interface UserConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLUserEdgeTypeResolver<TParent = any> {
  cursor?: UserEdgeToCursorResolver<TParent>
  node?: UserEdgeToNodeResolver<TParent>
}

export interface UserEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDraftConnectionTypeResolver<TParent = any> {
  pageInfo?: DraftConnectionToPageInfoResolver<TParent>
  edges?: DraftConnectionToEdgesResolver<TParent>
}

export interface DraftConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDraftEdgeTypeResolver<TParent = any> {
  cursor?: DraftEdgeToCursorResolver<TParent>
  node?: DraftEdgeToNodeResolver<TParent>
}

export interface DraftEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDraftTypeResolver<TParent = any> {
  id?: DraftToIdResolver<TParent>
  upstream?: DraftToUpstreamResolver<TParent>
  title?: DraftToTitleResolver<TParent>
  summary?: DraftToSummaryResolver<TParent>
  content?: DraftToContentResolver<TParent>
  createdAt?: DraftToCreatedAtResolver<TParent>
  updatedAt?: DraftToUpdatedAtResolver<TParent>
  tags?: DraftToTagsResolver<TParent>
  cover?: DraftToCoverResolver<TParent>
  publishState?: DraftToPublishStateResolver<TParent>
}

export interface DraftToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftToUpstreamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftToSummaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftToCoverResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftToPublishStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAudiodraftConnectionTypeResolver<TParent = any> {
  pageInfo?: AudiodraftConnectionToPageInfoResolver<TParent>
  edges?: AudiodraftConnectionToEdgesResolver<TParent>
}

export interface AudiodraftConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AudiodraftConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAudiodraftEdgeTypeResolver<TParent = any> {
  cursor?: AudiodraftEdgeToCursorResolver<TParent>
  node?: AudiodraftEdgeToNodeResolver<TParent>
}

export interface AudiodraftEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AudiodraftEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAudiodraftTypeResolver<TParent = any> {
  id?: AudiodraftToIdResolver<TParent>
  authorId?: AudiodraftToAuthorIdResolver<TParent>
  title?: AudiodraftToTitleResolver<TParent>
  audio?: AudiodraftToAudioResolver<TParent>
  length?: AudiodraftToLengthResolver<TParent>
  createdAt?: AudiodraftToCreatedAtResolver<TParent>
  updatedAt?: AudiodraftToUpdatedAtResolver<TParent>
}

export interface AudiodraftToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AudiodraftToAuthorIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AudiodraftToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AudiodraftToAudioResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AudiodraftToLengthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AudiodraftToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AudiodraftToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLUserActivityTypeResolver<TParent = any> {
  history?: UserActivityToHistoryResolver<TParent>
  recentSearches?: UserActivityToRecentSearchesResolver<TParent>
}

export interface UserActivityToHistoryArgs {
  input: GQLConnectionArgs
}
export interface UserActivityToHistoryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserActivityToHistoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToRecentSearchesArgs {
  input: GQLConnectionArgs
}
export interface UserActivityToRecentSearchesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserActivityToRecentSearchesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReadHistoryConnectionTypeResolver<TParent = any> {
  pageInfo?: ReadHistoryConnectionToPageInfoResolver<TParent>
  edges?: ReadHistoryConnectionToEdgesResolver<TParent>
}

export interface ReadHistoryConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReadHistoryConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLReadHistoryEdgeTypeResolver<TParent = any> {
  cursor?: ReadHistoryEdgeToCursorResolver<TParent>
  node?: ReadHistoryEdgeToNodeResolver<TParent>
}

export interface ReadHistoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReadHistoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLReadHistoryTypeResolver<TParent = any> {
  id?: ReadHistoryToIdResolver<TParent>
  article?: ReadHistoryToArticleResolver<TParent>
  readAt?: ReadHistoryToReadAtResolver<TParent>
}

export interface ReadHistoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReadHistoryToArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReadHistoryToReadAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRecentSearchConnectionTypeResolver<TParent = any> {
  pageInfo?: RecentSearchConnectionToPageInfoResolver<TParent>
  edges?: RecentSearchConnectionToEdgesResolver<TParent>
}

export interface RecentSearchConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RecentSearchConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRecentSearchEdgeTypeResolver<TParent = any> {
  cursor?: RecentSearchEdgeToCursorResolver<TParent>
  node?: RecentSearchEdgeToNodeResolver<TParent>
}

export interface RecentSearchEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RecentSearchEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLUserStatusTypeResolver<TParent = any> {
  state?: UserStatusToStateResolver<TParent>
  MAT?: UserStatusToMATResolver<TParent>
  invitation?: UserStatusToInvitationResolver<TParent>
  articleCount?: UserStatusToArticleCountResolver<TParent>
  viewCount?: UserStatusToViewCountResolver<TParent>
  draftCount?: UserStatusToDraftCountResolver<TParent>
  commentCount?: UserStatusToCommentCountResolver<TParent>
  quotationCount?: UserStatusToQuotationCountResolver<TParent>
  subscriptionCount?: UserStatusToSubscriptionCountResolver<TParent>
  followeeCount?: UserStatusToFolloweeCountResolver<TParent>
  followerCount?: UserStatusToFollowerCountResolver<TParent>
  unreadNoticeCount?: UserStatusToUnreadNoticeCountResolver<TParent>
}

export interface UserStatusToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToMATResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToArticleCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToViewCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToDraftCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToCommentCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToQuotationCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToSubscriptionCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToFolloweeCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToFollowerCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserStatusToUnreadNoticeCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLMATTypeResolver<TParent = any> {
  total?: MATToTotalResolver<TParent>
  history?: MATToHistoryResolver<TParent>
}

export interface MATToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MATToHistoryArgs {
  input: GQLConnectionArgs
}
export interface MATToHistoryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MATToHistoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTransactionConnectionTypeResolver<TParent = any> {
  pageInfo?: TransactionConnectionToPageInfoResolver<TParent>
  edges?: TransactionConnectionToEdgesResolver<TParent>
}

export interface TransactionConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TransactionConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTransactionEdgeTypeResolver<TParent = any> {
  cursor?: TransactionEdgeToCursorResolver<TParent>
  node?: TransactionEdgeToNodeResolver<TParent>
}

export interface TransactionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TransactionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTransactionTypeResolver<TParent = any> {
  delta?: TransactionToDeltaResolver<TParent>
  purpose?: TransactionToPurposeResolver<TParent>
  reference?: TransactionToReferenceResolver<TParent>
  createdAt?: TransactionToCreatedAtResolver<TParent>
}

export interface TransactionToDeltaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TransactionToPurposeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TransactionToReferenceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TransactionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLInvitationStatusTypeResolver<TParent = any> {
  MAT?: InvitationStatusToMATResolver<TParent>
  left?: InvitationStatusToLeftResolver<TParent>
  sent?: InvitationStatusToSentResolver<TParent>
}

export interface InvitationStatusToMATResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface InvitationStatusToLeftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface InvitationStatusToSentArgs {
  input: GQLConnectionArgs
}
export interface InvitationStatusToSentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: InvitationStatusToSentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLInvitationConnectionTypeResolver<TParent = any> {
  pageInfo?: InvitationConnectionToPageInfoResolver<TParent>
  edges?: InvitationConnectionToEdgesResolver<TParent>
}

export interface InvitationConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface InvitationConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLInvitationEdgeTypeResolver<TParent = any> {
  cursor?: InvitationEdgeToCursorResolver<TParent>
  node?: InvitationEdgeToNodeResolver<TParent>
}

export interface InvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface InvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLInvitationTypeResolver<TParent = any> {
  id?: InvitationToIdResolver<TParent>
  user?: InvitationToUserResolver<TParent>
  email?: InvitationToEmailResolver<TParent>
  accepted?: InvitationToAcceptedResolver<TParent>
  createdAt?: InvitationToCreatedAtResolver<TParent>
}

export interface InvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface InvitationToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface InvitationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface InvitationToAcceptedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface InvitationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLNoticeConnectionTypeResolver<TParent = any> {
  pageInfo?: NoticeConnectionToPageInfoResolver<TParent>
  edges?: NoticeConnectionToEdgesResolver<TParent>
}

export interface NoticeConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NoticeConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLNoticeEdgeTypeResolver<TParent = any> {
  cursor?: NoticeEdgeToCursorResolver<TParent>
  node?: NoticeEdgeToNodeResolver<TParent>
}

export interface NoticeEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NoticeEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLNoticeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo):
    | 'ArticleNewAppreciationNotice'
    | 'ArticleNewCommentNotice'
    | 'ArticleNewDownstreamNotice'
    | 'ArticleNewSubscriberNotice'
    | 'ArticlePublishedNotice'
    | 'CommentMentionedYouNotice'
    | 'CommentNewReplyNotice'
    | 'CommentNewUpvoteNotice'
    | 'CommentPinnedNotice'
    | 'DownstreamArticleArchivedNotice'
    | 'OfficialAnnouncementNotice'
    | 'SubscribedArticleNewCommentNotice'
    | 'UpstreamArticleArchivedNotice'
    | 'UserNewFollowerNotice'
}
export interface GQLCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>
  state?: CommentToStateResolver<TParent>
  createdAt?: CommentToCreatedAtResolver<TParent>
  article?: CommentToArticleResolver<TParent>
  content?: CommentToContentResolver<TParent>
  author?: CommentToAuthorResolver<TParent>
  pinned?: CommentToPinnedResolver<TParent>
  upvotes?: CommentToUpvotesResolver<TParent>
  downvotes?: CommentToDownvotesResolver<TParent>
  quote?: CommentToQuoteResolver<TParent>
  myVote?: CommentToMyVoteResolver<TParent>
  mentions?: CommentToMentionsResolver<TParent>
  comments?: CommentToCommentsResolver<TParent>
  parentComment?: CommentToParentCommentResolver<TParent>
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToPinnedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToUpvotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToDownvotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToQuoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToMyVoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToMentionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToCommentsArgs {
  input: GQLConnectionArgs
}
export interface CommentToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: CommentToCommentsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToParentCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCommentConnectionTypeResolver<TParent = any> {
  pageInfo?: CommentConnectionToPageInfoResolver<TParent>
  edges?: CommentConnectionToEdgesResolver<TParent>
}

export interface CommentConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCommentEdgeTypeResolver<TParent = any> {
  cursor?: CommentEdgeToCursorResolver<TParent>
  node?: CommentEdgeToNodeResolver<TParent>
}

export interface CommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSearchResultConnectionTypeResolver<TParent = any> {
  pageInfo?: SearchResultConnectionToPageInfoResolver<TParent>
  edges?: SearchResultConnectionToEdgesResolver<TParent>
}

export interface SearchResultConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchResultConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSearchResultEdgeTypeResolver<TParent = any> {
  cursor?: SearchResultEdgeToCursorResolver<TParent>
  node?: SearchResultEdgeToNodeResolver<TParent>
}

export interface SearchResultEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchResultEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSearchResultTypeResolver<TParent = any> {
  node?: SearchResultToNodeResolver<TParent>
  match?: SearchResultToMatchResolver<TParent>
}

export interface SearchResultToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchResultToMatchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLOfficialTypeResolver<TParent = any> {
  reportCategory?: OfficialToReportCategoryResolver<TParent>
  feedbackCategory?: OfficialToFeedbackCategoryResolver<TParent>
}

export interface OfficialToReportCategoryResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OfficialToFeedbackCategoryResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLReleaseConnectionTypeResolver<TParent = any> {
  pageInfo?: ReleaseConnectionToPageInfoResolver<TParent>
  edges?: ReleaseConnectionToEdgesResolver<TParent>
}

export interface ReleaseConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLReleaseEdgeTypeResolver<TParent = any> {
  cursor?: ReleaseEdgeToCursorResolver<TParent>
  node?: ReleaseEdgeToNodeResolver<TParent>
}

export interface ReleaseEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLReleaseTypeResolver<TParent = any> {
  title?: ReleaseToTitleResolver<TParent>
  description?: ReleaseToDescriptionResolver<TParent>
  cover?: ReleaseToCoverResolver<TParent>
  link?: ReleaseToLinkResolver<TParent>
  platform?: ReleaseToPlatformResolver<TParent>
  channel?: ReleaseToChannelResolver<TParent>
  version?: ReleaseToVersionResolver<TParent>
  latest?: ReleaseToLatestResolver<TParent>
  forceUpdate?: ReleaseToForceUpdateResolver<TParent>
  releasedAt?: ReleaseToReleasedAtResolver<TParent>
}

export interface ReleaseToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseToCoverResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseToLinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseToPlatformResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseToChannelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseToVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseToLatestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseToForceUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReleaseToReleasedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLMutationTypeResolver<TParent = any> {
  _?: MutationTo_Resolver<TParent>
  publishArticle?: MutationToPublishArticleResolver<TParent>
  archiveArticle?: MutationToArchiveArticleResolver<TParent>
  subscribeArticle?: MutationToSubscribeArticleResolver<TParent>
  unsubscribeArticle?: MutationToUnsubscribeArticleResolver<TParent>
  reportArticle?: MutationToReportArticleResolver<TParent>
  appreciateArticle?: MutationToAppreciateArticleResolver<TParent>
  readArticle?: MutationToReadArticleResolver<TParent>
  recallPublish?: MutationToRecallPublishResolver<TParent>
  toggleArticleLive?: MutationToToggleArticleLiveResolver<TParent>
  toggleArticlePublic?: MutationToToggleArticlePublicResolver<TParent>
  putComment?: MutationToPutCommentResolver<TParent>
  pinComment?: MutationToPinCommentResolver<TParent>
  deleteComment?: MutationToDeleteCommentResolver<TParent>
  reportComment?: MutationToReportCommentResolver<TParent>
  voteComment?: MutationToVoteCommentResolver<TParent>
  unvoteComment?: MutationToUnvoteCommentResolver<TParent>
  putAudiodraft?: MutationToPutAudiodraftResolver<TParent>
  deleteAudiodraft?: MutationToDeleteAudiodraftResolver<TParent>
  putDraft?: MutationToPutDraftResolver<TParent>
  deleteDraft?: MutationToDeleteDraftResolver<TParent>
  markAllNoticesAsRead?: MutationToMarkAllNoticesAsReadResolver<TParent>
  singleFileUpload?: MutationToSingleFileUploadResolver<TParent>
  feedback?: MutationToFeedbackResolver<TParent>
  sendVerificationCode?: MutationToSendVerificationCodeResolver<TParent>
  confirmVerificationCode?: MutationToConfirmVerificationCodeResolver<TParent>
  confirmResetPassword?: MutationToConfirmResetPasswordResolver<TParent>
  confirmChangeEmail?: MutationToConfirmChangeEmailResolver<TParent>
  confirmVerifyEmail?: MutationToConfirmVerifyEmailResolver<TParent>
  userRegister?: MutationToUserRegisterResolver<TParent>
  userLogin?: MutationToUserLoginResolver<TParent>
  addOAuth?: MutationToAddOAuthResolver<TParent>
  updateUserInfo?: MutationToUpdateUserInfoResolver<TParent>
  updateNotificationSetting?: MutationToUpdateNotificationSettingResolver<
    TParent
  >
  followUser?: MutationToFollowUserResolver<TParent>
  unfollowUser?: MutationToUnfollowUserResolver<TParent>
  importArticles?: MutationToImportArticlesResolver<TParent>
  clearReadHistory?: MutationToClearReadHistoryResolver<TParent>
  clearSearchHistory?: MutationToClearSearchHistoryResolver<TParent>
  invite?: MutationToInviteResolver<TParent>
}

export interface MutationTo_Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MutationToPublishArticleArgs {
  input: GQLPublishArticleInput
}
export interface MutationToPublishArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPublishArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToArchiveArticleArgs {
  input: GQLArchiveArticleInput
}
export interface MutationToArchiveArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToArchiveArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSubscribeArticleArgs {
  input: GQLSubscribeArticleInput
}
export interface MutationToSubscribeArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSubscribeArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnsubscribeArticleArgs {
  input: GQLUnsubscribeArticleInput
}
export interface MutationToUnsubscribeArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUnsubscribeArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToReportArticleArgs {
  input: GQLReportArticleInput
}
export interface MutationToReportArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToReportArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAppreciateArticleArgs {
  input: GQLAppreciateArticleInput
}
export interface MutationToAppreciateArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAppreciateArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToReadArticleArgs {
  input: GQLReadArticleInput
}
export interface MutationToReadArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToReadArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRecallPublishArgs {
  input: GQLRecallPublishInput
}
export interface MutationToRecallPublishResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToRecallPublishArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleArticleLiveArgs {
  input: GQLToggleArticleLiveInput
}
export interface MutationToToggleArticleLiveResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleArticleLiveArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleArticlePublicArgs {
  input: GQLToggleArticlePublicInput
}
export interface MutationToToggleArticlePublicResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleArticlePublicArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutCommentArgs {
  input: GQLPutCommentInput
}
export interface MutationToPutCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutCommentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPinCommentArgs {
  input: GQLPinCommentInput
}
export interface MutationToPinCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPinCommentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteCommentArgs {
  input: GQLDeleteCommentInput
}
export interface MutationToDeleteCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteCommentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToReportCommentArgs {
  input: GQLReportCommentInput
}
export interface MutationToReportCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToReportCommentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToVoteCommentArgs {
  input: GQLVoteCommentInput
}
export interface MutationToVoteCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToVoteCommentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnvoteCommentArgs {
  input: GQLUnvoteCommentInput
}
export interface MutationToUnvoteCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUnvoteCommentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutAudiodraftArgs {
  input: GQLPutAudiodraftInput
}
export interface MutationToPutAudiodraftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutAudiodraftArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteAudiodraftArgs {
  input: GQLDeleteAudiodraftInput
}
export interface MutationToDeleteAudiodraftResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteAudiodraftArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutDraftArgs {
  input: GQLPutDraftInput
}
export interface MutationToPutDraftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutDraftArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteDraftArgs {
  input: GQLDeleteDraftInput
}
export interface MutationToDeleteDraftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteDraftArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkAllNoticesAsReadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MutationToSingleFileUploadArgs {
  input: GQLSingleFileUploadInput
}
export interface MutationToSingleFileUploadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSingleFileUploadArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToFeedbackArgs {
  input: GQLFeedbackInput
}
export interface MutationToFeedbackResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToFeedbackArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSendVerificationCodeArgs {
  input: GQLSendVerificationCodeInput
}
export interface MutationToSendVerificationCodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSendVerificationCodeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToConfirmVerificationCodeArgs {
  input: GQLConfirmVerificationCodeInput
}
export interface MutationToConfirmVerificationCodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToConfirmVerificationCodeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToConfirmResetPasswordArgs {
  input: GQLConfirmResetPasswordInput
}
export interface MutationToConfirmResetPasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToConfirmResetPasswordArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToConfirmChangeEmailArgs {
  input: GQLConfirmChangeEmailInput
}
export interface MutationToConfirmChangeEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToConfirmChangeEmailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToConfirmVerifyEmailArgs {
  input: GQLConfirmVerifyEmailInput
}
export interface MutationToConfirmVerifyEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToConfirmVerifyEmailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUserRegisterArgs {
  input: GQLUserRegisterInput
}
export interface MutationToUserRegisterResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUserRegisterArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUserLoginArgs {
  input: GQLUserLoginInput
}
export interface MutationToUserLoginResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUserLoginArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAddOAuthArgs {
  input: GQLAddOAuthInput
}
export interface MutationToAddOAuthResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToAddOAuthArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateUserInfoArgs {
  input: GQLUpdateUserInfoInput
}
export interface MutationToUpdateUserInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateUserInfoArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateNotificationSettingArgs {
  input: GQLUpdateNotificationSettingInput
}
export interface MutationToUpdateNotificationSettingResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateNotificationSettingArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToFollowUserArgs {
  input: GQLFollowUserInput
}
export interface MutationToFollowUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToFollowUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnfollowUserArgs {
  input: GQLUnfollowUserInput
}
export interface MutationToUnfollowUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUnfollowUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToImportArticlesArgs {
  input: GQLImportArticlesInput
}
export interface MutationToImportArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToImportArticlesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToClearReadHistoryArgs {
  input?: GQLClearReadHistoryInput
}
export interface MutationToClearReadHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToClearReadHistoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToClearSearchHistoryResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MutationToInviteArgs {
  input: GQLInviteInput
}
export interface MutationToInviteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToInviteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAssetTypeResolver<TParent = any> {
  id?: AssetToIdResolver<TParent>
  type?: AssetToTypeResolver<TParent>
  path?: AssetToPathResolver<TParent>
  createdAt?: AssetToCreatedAtResolver<TParent>
}

export interface AssetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AssetToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AssetToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AssetToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAuthResultTypeResolver<TParent = any> {
  auth?: AuthResultToAuthResolver<TParent>
  token?: AuthResultToTokenResolver<TParent>
}

export interface AuthResultToAuthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AuthResultToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSubscriptionTypeResolver<TParent = any> {
  _?: SubscriptionTo_Resolver<TParent>
  nodeEdited?: SubscriptionToNodeEditedResolver<TParent>
}

export interface SubscriptionTo_Resolver<TParent = any, TResult = any> {
  resolve?: (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ) => TResult
  subscribe: (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ) => AsyncIterator<TResult>
}

export interface SubscriptionToNodeEditedArgs {
  input: GQLNodeEditedInput
}
export interface SubscriptionToNodeEditedResolver<
  TParent = any,
  TResult = any
> {
  resolve?: (
    parent: TParent,
    args: SubscriptionToNodeEditedArgs,
    context: any,
    info: GraphQLResolveInfo
  ) => TResult
  subscribe: (
    parent: TParent,
    args: SubscriptionToNodeEditedArgs,
    context: any,
    info: GraphQLResolveInfo
  ) => AsyncIterator<TResult>
}

export interface GQLArticleNewAppreciationNoticeTypeResolver<TParent = any> {
  id?: ArticleNewAppreciationNoticeToIdResolver<TParent>
  unread?: ArticleNewAppreciationNoticeToUnreadResolver<TParent>
  createdAt?: ArticleNewAppreciationNoticeToCreatedAtResolver<TParent>
  actors?: ArticleNewAppreciationNoticeToActorsResolver<TParent>
  target?: ArticleNewAppreciationNoticeToTargetResolver<TParent>
  MAT?: ArticleNewAppreciationNoticeToMATResolver<TParent>
}

export interface ArticleNewAppreciationNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewAppreciationNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewAppreciationNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewAppreciationNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewAppreciationNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewAppreciationNoticeToMATResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLArticleNewCommentNoticeTypeResolver<TParent = any> {
  id?: ArticleNewCommentNoticeToIdResolver<TParent>
  unread?: ArticleNewCommentNoticeToUnreadResolver<TParent>
  createdAt?: ArticleNewCommentNoticeToCreatedAtResolver<TParent>
  actors?: ArticleNewCommentNoticeToActorsResolver<TParent>
  target?: ArticleNewCommentNoticeToTargetResolver<TParent>
  comment?: ArticleNewCommentNoticeToCommentResolver<TParent>
}

export interface ArticleNewCommentNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewCommentNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewCommentNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewCommentNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewCommentNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewCommentNoticeToCommentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLArticleNewDownstreamNoticeTypeResolver<TParent = any> {
  id?: ArticleNewDownstreamNoticeToIdResolver<TParent>
  unread?: ArticleNewDownstreamNoticeToUnreadResolver<TParent>
  createdAt?: ArticleNewDownstreamNoticeToCreatedAtResolver<TParent>
  actors?: ArticleNewDownstreamNoticeToActorsResolver<TParent>
  downstream?: ArticleNewDownstreamNoticeToDownstreamResolver<TParent>
  target?: ArticleNewDownstreamNoticeToTargetResolver<TParent>
}

export interface ArticleNewDownstreamNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewDownstreamNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewDownstreamNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewDownstreamNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewDownstreamNoticeToDownstreamResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewDownstreamNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLArticleNewSubscriberNoticeTypeResolver<TParent = any> {
  id?: ArticleNewSubscriberNoticeToIdResolver<TParent>
  unread?: ArticleNewSubscriberNoticeToUnreadResolver<TParent>
  createdAt?: ArticleNewSubscriberNoticeToCreatedAtResolver<TParent>
  actors?: ArticleNewSubscriberNoticeToActorsResolver<TParent>
  target?: ArticleNewSubscriberNoticeToTargetResolver<TParent>
}

export interface ArticleNewSubscriberNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewSubscriberNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewSubscriberNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewSubscriberNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticleNewSubscriberNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLArticlePublishedNoticeTypeResolver<TParent = any> {
  id?: ArticlePublishedNoticeToIdResolver<TParent>
  unread?: ArticlePublishedNoticeToUnreadResolver<TParent>
  createdAt?: ArticlePublishedNoticeToCreatedAtResolver<TParent>
  target?: ArticlePublishedNoticeToTargetResolver<TParent>
}

export interface ArticlePublishedNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticlePublishedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticlePublishedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ArticlePublishedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCommentMentionedYouNoticeTypeResolver<TParent = any> {
  id?: CommentMentionedYouNoticeToIdResolver<TParent>
  unread?: CommentMentionedYouNoticeToUnreadResolver<TParent>
  createdAt?: CommentMentionedYouNoticeToCreatedAtResolver<TParent>
  actors?: CommentMentionedYouNoticeToActorsResolver<TParent>
  target?: CommentMentionedYouNoticeToTargetResolver<TParent>
}

export interface CommentMentionedYouNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentMentionedYouNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentMentionedYouNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentMentionedYouNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentMentionedYouNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCommentNewReplyNoticeTypeResolver<TParent = any> {
  id?: CommentNewReplyNoticeToIdResolver<TParent>
  unread?: CommentNewReplyNoticeToUnreadResolver<TParent>
  createdAt?: CommentNewReplyNoticeToCreatedAtResolver<TParent>
  actors?: CommentNewReplyNoticeToActorsResolver<TParent>
  target?: CommentNewReplyNoticeToTargetResolver<TParent>
  reply?: CommentNewReplyNoticeToReplyResolver<TParent>
}

export interface CommentNewReplyNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentNewReplyNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentNewReplyNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentNewReplyNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentNewReplyNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentNewReplyNoticeToReplyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCommentNewUpvoteNoticeTypeResolver<TParent = any> {
  id?: CommentNewUpvoteNoticeToIdResolver<TParent>
  unread?: CommentNewUpvoteNoticeToUnreadResolver<TParent>
  createdAt?: CommentNewUpvoteNoticeToCreatedAtResolver<TParent>
  actors?: CommentNewUpvoteNoticeToActorsResolver<TParent>
  target?: CommentNewUpvoteNoticeToTargetResolver<TParent>
}

export interface CommentNewUpvoteNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentNewUpvoteNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentNewUpvoteNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentNewUpvoteNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentNewUpvoteNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCommentPinnedNoticeTypeResolver<TParent = any> {
  id?: CommentPinnedNoticeToIdResolver<TParent>
  unread?: CommentPinnedNoticeToUnreadResolver<TParent>
  createdAt?: CommentPinnedNoticeToCreatedAtResolver<TParent>
  target?: CommentPinnedNoticeToTargetResolver<TParent>
}

export interface CommentPinnedNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentPinnedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentPinnedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentPinnedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDownstreamArticleArchivedNoticeTypeResolver<TParent = any> {
  id?: DownstreamArticleArchivedNoticeToIdResolver<TParent>
  unread?: DownstreamArticleArchivedNoticeToUnreadResolver<TParent>
  createdAt?: DownstreamArticleArchivedNoticeToCreatedAtResolver<TParent>
  downstream?: DownstreamArticleArchivedNoticeToDownstreamResolver<TParent>
  target?: DownstreamArticleArchivedNoticeToTargetResolver<TParent>
}

export interface DownstreamArticleArchivedNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DownstreamArticleArchivedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DownstreamArticleArchivedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DownstreamArticleArchivedNoticeToDownstreamResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DownstreamArticleArchivedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLOfficialAnnouncementNoticeTypeResolver<TParent = any> {
  id?: OfficialAnnouncementNoticeToIdResolver<TParent>
  unread?: OfficialAnnouncementNoticeToUnreadResolver<TParent>
  createdAt?: OfficialAnnouncementNoticeToCreatedAtResolver<TParent>
  message?: OfficialAnnouncementNoticeToMessageResolver<TParent>
  link?: OfficialAnnouncementNoticeToLinkResolver<TParent>
}

export interface OfficialAnnouncementNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OfficialAnnouncementNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OfficialAnnouncementNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OfficialAnnouncementNoticeToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OfficialAnnouncementNoticeToLinkResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSubscribedArticleNewCommentNoticeTypeResolver<
  TParent = any
> {
  id?: SubscribedArticleNewCommentNoticeToIdResolver<TParent>
  unread?: SubscribedArticleNewCommentNoticeToUnreadResolver<TParent>
  createdAt?: SubscribedArticleNewCommentNoticeToCreatedAtResolver<TParent>
  actors?: SubscribedArticleNewCommentNoticeToActorsResolver<TParent>
  target?: SubscribedArticleNewCommentNoticeToTargetResolver<TParent>
  comment?: SubscribedArticleNewCommentNoticeToCommentResolver<TParent>
}

export interface SubscribedArticleNewCommentNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SubscribedArticleNewCommentNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SubscribedArticleNewCommentNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SubscribedArticleNewCommentNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SubscribedArticleNewCommentNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SubscribedArticleNewCommentNoticeToCommentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLUpstreamArticleArchivedNoticeTypeResolver<TParent = any> {
  id?: UpstreamArticleArchivedNoticeToIdResolver<TParent>
  unread?: UpstreamArticleArchivedNoticeToUnreadResolver<TParent>
  createdAt?: UpstreamArticleArchivedNoticeToCreatedAtResolver<TParent>
  upstream?: UpstreamArticleArchivedNoticeToUpstreamResolver<TParent>
  target?: UpstreamArticleArchivedNoticeToTargetResolver<TParent>
}

export interface UpstreamArticleArchivedNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UpstreamArticleArchivedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UpstreamArticleArchivedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UpstreamArticleArchivedNoticeToUpstreamResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UpstreamArticleArchivedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLUserNewFollowerNoticeTypeResolver<TParent = any> {
  id?: UserNewFollowerNoticeToIdResolver<TParent>
  unread?: UserNewFollowerNoticeToUnreadResolver<TParent>
  createdAt?: UserNewFollowerNoticeToCreatedAtResolver<TParent>
  actors?: UserNewFollowerNoticeToActorsResolver<TParent>
}

export interface UserNewFollowerNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserNewFollowerNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserNewFollowerNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserNewFollowerNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}
